#!/usr/bin/env bash
# shellcheck source=/dev/null
# PURPOSE:  Generate some variables for GCP/GKE. This file is called with one
#           argument while sourcing it in.
# -----------------------------------------------------------------------------
#    EXEC:  source scripts/setup/build.env <prod|stage>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Check for arguments
if [[ "$#" -lt 1 ]]; then
    echo "Bro, where's my first argument: stage or prod?"
    return
fi

set -x

# -----------------------------------------------------------------------------
# Client Truths
export TF_VAR_envBuild="$1"
export dns_zone='kubes.rocks.'
export TF_VAR_dns_name="${dns_zone%.*}"
export TF_VAR_dns_zone="${dns_zone}"
# Either stand-alone or high-availability: <sa|ha>
export vaultDeployType='ha'

# -----------------------------------------------------------------------------
# Pull in Organization/Billing
source "$HOME/.config/gcloud/configurations/kubes-rocks-sec"

# -----------------------------------------------------------------------------
# Set Project variables
export myProject='kubes-gke-gitops'
export TF_VAR_myProject="$myProject"
# gcloud config configurations list

# gcloud config list --format 'value(compute.region)'
export TF_VAR_region='us-central1'

# gcloud config list --format 'value(compute.zone)'
export TF_VAR_zone="${TF_VAR_region}-a"


# -----------------------------------------------------------------------------
# Set Security variables: for certs/keys/etc

# -----------------------------------------------------------------------------
# Environmental Considerations
# Terraform Constants
case "$TF_VAR_envBuild" in
    stage)
        export TF_VAR_project_id="${myProject}"
        #export TF_VAR_cidr_range='10.10.0.0/24'
        export TF_VAR_cluster_apps="${TF_VAR_project_id}"
        export TF_VAR_cluster_vault="vault-${TF_VAR_project_id}"
        export TF_VAR_envBucket="tfstate-${TF_VAR_project_id}-${TF_VAR_envBuild}"
        export VAULT_ADDR="https://vault-${TF_VAR_envBuild}.${dns_zone:0:-1}"
        export TF_VAR_min_dist_size='2'
        # Defaults to e2-medium
        #export TF_VAR_worker_type='e2-micro'
        export TF_VAR_worker_type='e2-medium'
        ;;
    prod)
        export TF_VAR_project_id="$myProject"
        #export TF_VAR_cidr_range='10.11.0.0/24'
        export TF_VAR_cluster_apps="${TF_VAR_project_id}"
        export TF_VAR_cluster_vault="vault-${TF_VAR_project_id}"
        export TF_VAR_envBucket="tfstate-${myProject}"
        export VAULT_ADDR="https://vault.${dns_zone:0:-1}"
        export TF_VAR_min_dist_size='3'
        export TF_VAR_worker_type='n1-standard-1'
        ;;
    *)  echo "$TF_VAR_envBuild is unsupported; exiting."
        ;;
esac


# -----------------------------------------------------------------------------
# Same for either ENV; depends on case
#export TF_VAR_projectCreds="$GOOGLE_APPLICATION_CREDENTIALS"
export filePlan="/tmp/${TF_VAR_cluster_apps}.plan"
export ktxFile="${kubeConfDir}/${TF_VAR_cluster_apps}.ktx"
export KUBECONFIG="$ktxFile"

# Vault Stuff
export svcAcctName='vault-iam'
export serviceEmail="${svcAcctName}@${TF_VAR_project_id}.iam.gserviceaccount.com"
export svcAcctDesc='Service Account for Vault/GCP-IAM Auth Method'
export svcAcctDispName="${svcAcctName}-auth-method"
export serviceAccount="serviceAccount:${serviceEmail}"
export svcAcctCreds="/var/tmp/${svcAcctName}-${TF_VAR_project_id}.json"
export vaultStuff='/var/tmp/vault-stuff.env'
set +x


###----------------------------------------------------------------------------
### Change TF backend prefix with ENV change: <stage|prod>
###---
scripts/setup/tf-backend-create.sh


###----------------------------------------------------------------------------
### Setup KUBECONFIG directory if it's not already
###---
export kubeConfDir="$HOME/.kube"
if [[ ! -d "$kubeConfDir" ]]; then
    mkdir -p "$kubeConfDir"
fi
#set +x
